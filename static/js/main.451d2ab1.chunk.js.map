{"version":3,"sources":["gameService.ts","components/GameControlsBlock.tsx","components/Cell.tsx","components/GameField.tsx","hooks/useWindowSize.ts","App.tsx","index.tsx"],"names":["SupportedTemplate","GameControlsBlock","children","className","Cell","id","isAlive","getFieldKey","x","y","getNeighbourCellCoordinate","currentValue","shift","fieldSize","newValue","getConnectionCount","field","count","xMinusOne","xPlusOne","yMinusOne","yPlusOne","GameField","onCellClick","handleCellClick","useCallback","e","target","split","Number","fieldSizeArray","useMemo","Array","fill","onClick","map","_","cells","key","init","width","window","innerWidth","height","innerHeight","useWindowSize","useState","windowSize","setWindowSize","useEffect","handleWindowResize","debounce","addEventListener","removeEventListener","initFieldSize","amountOfCellsToDisplayOnThisDevice","Math","floor","App","setFieldSize","setField","isGameActive","setIsGameActive","history","setHistory","maxFieldSize","setMaxFieldSize","calculateNextStep","updatedField","aliveCellsCount","connectionCount","newIsAlive","calculateNextGameState","prevHistory","slice","setTimeout","alert","timeoutRef","clearTimeout","handleAddTemplate","template","glider","middlePoint","generateGliderPreset","pulsar","generatePulsarPreset","beacon","generateBeaconPreset","Object","values","length","disabled","prevValue","previousState","filter","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.451d2ab1.chunk.js","sourcesContent":["export type Field = Record<string, boolean>;\n\nexport enum SupportedTemplate {\n    glider = 'glider',\n    pulsar = 'pulsar',\n    beacon = 'beacon',\n}\n\nexport const getFieldKey = (x: number, y: number): string => x + '_' + y;\n\nexport const getNeighbourCellCoordinate = (currentValue: number, shift: number, fieldSize: number): number => {\n    // FIXME there is an edge case when shift > fieldSize\n    let newValue = currentValue + shift;\n    if (newValue > fieldSize - 1) {\n        newValue -= fieldSize;\n    } else if (newValue < 0) {\n        newValue += fieldSize;\n    }\n\n    return newValue;\n};\n\nexport const getConnectionCount = (x: number, y: number, field: Field, fieldSize: number): number => {\n    let count = 0;\n\n    const xMinusOne = getNeighbourCellCoordinate(x, -1, fieldSize);\n    const xPlusOne = getNeighbourCellCoordinate(x, 1, fieldSize);\n    const yMinusOne = getNeighbourCellCoordinate(y, -1, fieldSize);\n    const yPlusOne = getNeighbourCellCoordinate(y, 1, fieldSize);\n\n    if (field[getFieldKey(xMinusOne, yMinusOne)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(xMinusOne, y)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(xMinusOne, yPlusOne)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(x, yMinusOne)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(x, yPlusOne)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(xPlusOne, yMinusOne)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(xPlusOne, y)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(xPlusOne, yPlusOne)]) {\n        count += 1;\n    }\n\n    return count;\n};\n\nexport const calculateNextGameState = (\n    field: Field,\n    fieldSize: number,\n): {\n    updatedField: Field;\n    aliveCellsCount: number;\n} => {\n    const updatedField: Field = {};\n    let aliveCellsCount = 0;\n\n    for (let x = 0; x < fieldSize; x++) {\n        for (let y = 0; y < fieldSize; y++) {\n            const key = getFieldKey(x, y);\n            const isAlive = field[key];\n            const connectionCount = getConnectionCount(x, y, field, fieldSize);\n\n            let newIsAlive = false;\n\n            if (isAlive && (connectionCount === 2 || connectionCount === 3)) {\n                newIsAlive = true;\n                aliveCellsCount += 1;\n            } else if (!isAlive && connectionCount === 3) {\n                newIsAlive = true;\n                aliveCellsCount += 1;\n            }\n\n            if (newIsAlive) {\n                updatedField[key] = newIsAlive;\n            }\n        }\n    }\n\n    return {\n        updatedField,\n        aliveCellsCount,\n    };\n};\n\nexport const generateGliderPreset = (fieldSize: number): Field => {\n    const field: Field = {};\n\n    if (fieldSize < 3) {\n        alert('Unable to add \"glider\" preset. Field is too small');\n        return field;\n    }\n\n    const middlePoint = {\n        x: Math.floor(fieldSize / 2),\n        y: Math.floor(fieldSize / 2),\n    };\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[getFieldKey(middlePoint.x, middlePoint.y)] = true;\n    field[getFieldKey(middlePoint.x, getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize))] = true;\n    field[getFieldKey(getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize), middlePoint.y)] = true;\n\n    return field;\n};\n\nexport const generatePulsarPreset = (fieldSize: number): Field => {\n    const field: Field = {};\n\n    if (fieldSize < 16) {\n        alert('Unable to add \"pulsar\" preset. Field is too small');\n        return field;\n    }\n\n    const middlePoint = {\n        x: Math.floor(fieldSize / 2),\n        y: Math.floor(fieldSize / 2),\n    };\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -4, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 4, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -4, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 4, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -4, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 4, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -4, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 4, fieldSize),\n        )\n    ] = true;\n\n    return field;\n};\n\nexport const generateBeaconPreset = (fieldSize: number): Field => {\n    const field: Field = {};\n\n    if (fieldSize < 4) {\n        alert('Unable to add \"beacon\" preset. Field is too small');\n        return field;\n    }\n\n    const middlePoint = {\n        x: Math.floor(fieldSize / 2),\n        y: Math.floor(fieldSize / 2),\n    };\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[getFieldKey(getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize), middlePoint.y)] = true;\n    field[getFieldKey(middlePoint.x, getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize))] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n\n    return field;\n};\n","import React from 'react';\nimport './GameControlsBlock.scss';\n\nexport const GameControlsBlock: React.FC<{}> = ({ children }) => {\n    return <div className=\"controls-container\">{children}</div>;\n};\n","import React from 'react';\nimport './Cell.scss';\n\ntype Props = { id: string; isAlive: boolean };\n\nexport const Cell: React.FC<Props> = ({ id, isAlive }) => (\n    <td id={id} className={`cell ${isAlive ? 'alive-cell' : ''}`} />\n);\n","import React, { MouseEvent, useCallback, useMemo } from 'react';\nimport { Cell } from './Cell';\nimport './GameField.scss';\nimport { getFieldKey } from '../gameService';\n\ntype Props = {\n    fieldSize: number;\n    field: Record<string, boolean>;\n    onCellClick: ({ x, y }: { x: number; y: number }) => void;\n};\n\nexport const GameField: React.FC<Props> = ({ fieldSize, field, onCellClick }) => {\n    const handleCellClick = useCallback(\n        (e: MouseEvent) => {\n            const targetId = (e.target as HTMLTableCellElement).id;\n            const [x, y] = targetId.split('_');\n\n            onCellClick({ x: Number(x), y: Number(y) });\n        },\n        [onCellClick],\n    );\n\n    const fieldSizeArray = useMemo(() => new Array(fieldSize).fill(null), [fieldSize]);\n\n    return (\n        <table className=\"game-field\" onClick={handleCellClick}>\n            <tbody>\n                {fieldSizeArray.map((_, x) => {\n                    const cells = fieldSizeArray.map((_, y) => {\n                        const id = getFieldKey(x, y);\n                        return <Cell key={id} id={id} isAlive={field[id]} />;\n                    });\n\n                    return <tr key={x}>{cells}</tr>;\n                })}\n            </tbody>\n        </table>\n    );\n};\n","import { useState, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\n\ninterface WindowSize {\n    width: number;\n    height: number;\n}\n\nconst init = (): WindowSize => {\n    return {\n        width: window.innerWidth,\n        height: window.innerHeight,\n    };\n};\n\nconst useWindowSize = (): WindowSize => {\n    const [windowSize, setWindowSize] = useState(init);\n\n    useEffect(() => {\n        const handleWindowResize = debounce(() => {\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }, 100);\n\n        window.addEventListener('resize', handleWindowResize);\n\n        return (): void => {\n            window.removeEventListener('resize', handleWindowResize);\n        };\n    }, []);\n\n    return windowSize;\n};\n\nexport default useWindowSize;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { GameControlsBlock } from './components/GameControlsBlock';\nimport { GameField } from './components/GameField';\nimport {\n    Field,\n    generateBeaconPreset,\n    generateGliderPreset,\n    generatePulsarPreset,\n    getFieldKey,\n    SupportedTemplate,\n    calculateNextGameState,\n} from './gameService';\nimport useWindowSize from './hooks/useWindowSize';\nimport './App.scss';\n\nconst CELL_SIZE = 24; // size of 1 cell in pixels. Should be aligned with styles\nconst MAX_CELLS_TO_DISPLAY = 25; // amount of cells to display on big screens\nconst SIMULATION_STEP_INTERVAL = 500; // time interval before next step in milliseconds\nconst AMOUNT_OF_HISTORY_RECORDS_TO_STORE = 1000;\n\nconst initFieldSize = (): number => {\n    const amountOfCellsToDisplayOnThisDevice = Math.floor(window.innerWidth / CELL_SIZE);\n\n    return amountOfCellsToDisplayOnThisDevice > MAX_CELLS_TO_DISPLAY\n        ? MAX_CELLS_TO_DISPLAY\n        : amountOfCellsToDisplayOnThisDevice;\n};\n\nconst App: React.FC<{}> = () => {\n    const [fieldSize, setFieldSize] = useState<number>(initFieldSize);\n    const [field, setField] = useState<Field>({});\n    const [isGameActive, setIsGameActive] = useState(false);\n    const [history, setHistory] = useState<Field[]>([]);\n    const windowSize = useWindowSize();\n    const [maxFieldSize, setMaxFieldSize] = useState(fieldSize);\n\n    const calculateNextStep = useCallback(() => {\n        const { updatedField, aliveCellsCount } = calculateNextGameState(field, fieldSize);\n\n        setField(updatedField);\n        // game cycle can be indefinite, se we cannot possible track all history.\n        setHistory((prevHistory) => [...prevHistory.slice(-AMOUNT_OF_HISTORY_RECORDS_TO_STORE), field]);\n\n        if (aliveCellsCount === 0) {\n            setIsGameActive(false);\n\n            // show alert after rerender with empty field, when it clean and nice\n            setTimeout(() => {\n                alert('Simulation is finished');\n            });\n        }\n    }, [fieldSize, field]);\n\n    useEffect(() => {\n        let timeoutRef: undefined | number;\n\n        if (isGameActive) {\n            timeoutRef = window.setTimeout(calculateNextStep, SIMULATION_STEP_INTERVAL);\n        }\n\n        return () => {\n            clearTimeout(timeoutRef);\n        };\n    }, [isGameActive, calculateNextStep]);\n\n    useEffect(() => {\n        const amountOfCellsToDisplayOnThisDevice = Math.floor(windowSize.width / CELL_SIZE);\n        setMaxFieldSize(amountOfCellsToDisplayOnThisDevice);\n    }, [windowSize.width]);\n\n    const handleCellClick = ({ x, y }: { x: number; y: number }) => {\n        setField((prevValue) => {\n            return {\n                ...prevValue,\n                [getFieldKey(x, y)]: true,\n            };\n        });\n        // FIXME: does user interaction considered to be a new generation???\n        // If so, we should create a new history record here\n    };\n\n    const handleClickReset = () => {\n        setField({});\n        setHistory([]);\n        setIsGameActive(false);\n    };\n\n    const handleAddTemplate = (template: SupportedTemplate) => {\n        let updatedField: Field | undefined;\n\n        switch (template) {\n            case SupportedTemplate.glider: {\n                updatedField = generateGliderPreset(fieldSize);\n                break;\n            }\n            case SupportedTemplate.pulsar: {\n                updatedField = generatePulsarPreset(fieldSize);\n                break;\n            }\n            case SupportedTemplate.beacon: {\n                updatedField = generateBeaconPreset(fieldSize);\n                break;\n            }\n            default:\n                break;\n        }\n\n        if (updatedField) {\n            const hasValues = Object.values(updatedField).length > 0;\n            if (!hasValues) {\n                return;\n            }\n\n            setField(updatedField);\n            setHistory([]);\n            setIsGameActive(true);\n        }\n    };\n\n    const handleClickNextStep = () => {\n        calculateNextStep();\n    };\n\n    const handleClickPreviousStep = () => {\n        const previousState = history[history.length - 1];\n\n        setField(previousState);\n        setHistory(history.filter((item) => item !== previousState));\n    };\n\n    const handleAddRow = () => {\n        setFieldSize((prevValue) => prevValue + 1);\n    };\n\n    const handleRemoveRow = () => {\n        setFieldSize((prevValue) => prevValue - 1);\n    };\n\n    return (\n        <main className=\"page-layout\">\n            <GameControlsBlock>\n                <span className=\"controls-label\">Simulation</span>\n                <div>\n                    <button className=\"controls-button\" onClick={() => setIsGameActive(!isGameActive)}>\n                        {!isGameActive ? 'Start' : 'Stop'}\n                    </button>\n                    <button className=\"controls-button\" onClick={handleClickReset}>\n                        Reset\n                    </button>\n                </div>\n            </GameControlsBlock>\n            <GameControlsBlock>\n                <span className=\"controls-label\">Field size</span>\n                <div>\n                    <button className=\"controls-button\" disabled={fieldSize >= maxFieldSize} onClick={handleAddRow}>\n                        Increase\n                    </button>\n                    <button className=\"controls-button\" disabled={fieldSize < 2} onClick={handleRemoveRow}>\n                        Decrease\n                    </button>\n                </div>\n            </GameControlsBlock>\n            <GameControlsBlock>\n                <span className=\"controls-label\">Generations</span>\n                <div>\n                    <button className=\"controls-button\" disabled={!history.length} onClick={handleClickPreviousStep}>\n                        Previous\n                    </button>\n                    <button className=\"controls-button\" onClick={handleClickNextStep}>\n                        Next\n                    </button>\n                </div>\n            </GameControlsBlock>\n            <GameControlsBlock>\n                <span className=\"controls-label\">Templates</span>\n                <div>\n                    <button className=\"controls-button\" onClick={() => handleAddTemplate(SupportedTemplate.glider)}>\n                        Glider\n                    </button>\n                    <button className=\"controls-button\" onClick={() => handleAddTemplate(SupportedTemplate.pulsar)}>\n                        Pulsar\n                    </button>\n                    <button className=\"controls-button\" onClick={() => handleAddTemplate(SupportedTemplate.beacon)}>\n                        Beacon\n                    </button>\n                </div>\n            </GameControlsBlock>\n            <GameField fieldSize={fieldSize} field={field} onCellClick={handleCellClick} />\n        </main>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}