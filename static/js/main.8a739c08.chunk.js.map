{"version":3,"sources":["gameService.ts","components/GameControlsBlock.tsx","components/Cell.tsx","gameReducer.ts","components/GameField.tsx","hooks/useWindowSize.ts","config.ts","App.tsx","index.tsx"],"names":["SupportedTemplate","GameControlsBlock","children","className","Cell","id","isAlive","GameActionType","getFieldKey","x","y","getNeighbourCellCoordinate","currentValue","shift","fieldSize","newValue","getConnectionCount","field","count","xMinusOne","xPlusOne","yMinusOne","yPlusOne","GameField","onCellClick","handleCellClick","useCallback","e","target","split","Number","fieldSizeArray","useMemo","Array","fill","data-testid","onClick","map","_","cells","key","init","width","window","innerWidth","height","innerHeight","useWindowSize","useState","windowSize","setWindowSize","useEffect","handleWindowResize","debounce","addEventListener","removeEventListener","gameInitialState","fieldState","amountOfCellsToDisplayOnThisDevice","Math","floor","initFieldSize","history","gameReducer","state","action","type","TriggerNextGeneration","updatedField","connectionCount","newIsAlive","calculateNextGeneration","slice","AddAliveCell","payload","Reset","IncreaseFieldSize","DecreaseFieldSize","GoToPreviousGeneration","previousFieldState","length","filter","item","RunPreset","updatedFieldState","App","isGameActive","setIsGameActive","useReducer","dispatch","maxFieldSize","setMaxFieldSize","intervalRef","setInterval","clearInterval","handleAddTemplate","template","glider","middlePoint","alert","generateGliderPreset","pulsar","generatePulsarPreset","beacon","generateBeaconPreset","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a739c08.chunk.js","sourcesContent":["export type Field = Record<string, boolean>;\n\nexport enum SupportedTemplate {\n    glider = 'glider',\n    pulsar = 'pulsar',\n    beacon = 'beacon',\n}\n\nexport const getFieldKey = (x: number, y: number): string => x + '_' + y;\n\nexport const getNeighbourCellCoordinate = (currentValue: number, shift: number, fieldSize: number): number => {\n    // FIXME there is an edge case when shift > fieldSize\n    let newValue = currentValue + shift;\n    if (newValue > fieldSize - 1) {\n        newValue -= fieldSize;\n    } else if (newValue < 0) {\n        newValue += fieldSize;\n    }\n\n    return newValue;\n};\n\nexport const getConnectionCount = (x: number, y: number, field: Field, fieldSize: number): number => {\n    let count = 0;\n\n    const xMinusOne = getNeighbourCellCoordinate(x, -1, fieldSize);\n    const xPlusOne = getNeighbourCellCoordinate(x, 1, fieldSize);\n    const yMinusOne = getNeighbourCellCoordinate(y, -1, fieldSize);\n    const yPlusOne = getNeighbourCellCoordinate(y, 1, fieldSize);\n\n    if (field[getFieldKey(xMinusOne, yMinusOne)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(xMinusOne, y)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(xMinusOne, yPlusOne)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(x, yMinusOne)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(x, yPlusOne)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(xPlusOne, yMinusOne)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(xPlusOne, y)]) {\n        count += 1;\n    }\n    if (field[getFieldKey(xPlusOne, yPlusOne)]) {\n        count += 1;\n    }\n\n    return count;\n};\n\nexport const calculateNextGeneration = (field: Field, fieldSize: number): Field => {\n    const updatedField: Field = {};\n\n    for (let x = 0; x < fieldSize; x++) {\n        for (let y = 0; y < fieldSize; y++) {\n            const key = getFieldKey(x, y);\n            const isAlive = field[key];\n            const connectionCount = getConnectionCount(x, y, field, fieldSize);\n\n            let newIsAlive = false;\n\n            if (isAlive && (connectionCount === 2 || connectionCount === 3)) {\n                newIsAlive = true;\n            } else if (!isAlive && connectionCount === 3) {\n                newIsAlive = true;\n            }\n\n            if (newIsAlive) {\n                updatedField[key] = newIsAlive;\n            }\n        }\n    }\n\n    return updatedField;\n};\n\nexport const generateGliderPreset = (fieldSize: number): Field | undefined => {\n    const field: Field = {};\n\n    if (fieldSize < 5) {\n        alert('Unable to add \"glider\" preset. Field is too small');\n        return;\n    }\n\n    const middlePoint = {\n        x: Math.floor(fieldSize / 2),\n        y: Math.floor(fieldSize / 2),\n    };\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[getFieldKey(middlePoint.x, middlePoint.y)] = true;\n    field[getFieldKey(middlePoint.x, getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize))] = true;\n    field[getFieldKey(getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize), middlePoint.y)] = true;\n\n    return field;\n};\n\nexport const generatePulsarPreset = (fieldSize: number): Field | undefined => {\n    const field: Field = {};\n\n    if (fieldSize < 16) {\n        alert('Unable to add \"pulsar\" preset. Field is too small');\n        return;\n    }\n\n    const middlePoint = {\n        x: Math.floor(fieldSize / 2),\n        y: Math.floor(fieldSize / 2),\n    };\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -4, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 4, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -4, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 4, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -4, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 4, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 3, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -6, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 4, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 6, fieldSize),\n        )\n    ] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -4, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 3, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 6, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 4, fieldSize),\n        )\n    ] = true;\n\n    return field;\n};\n\nexport const generateBeaconPreset = (fieldSize: number): Field | undefined => {\n    const field: Field = {};\n\n    if (fieldSize < 6) {\n        alert('Unable to add \"beacon\" preset. Field is too small');\n        return;\n    }\n\n    const middlePoint = {\n        x: Math.floor(fieldSize / 2),\n        y: Math.floor(fieldSize / 2),\n    };\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize),\n        )\n    ] = true;\n    field[getFieldKey(getNeighbourCellCoordinate(middlePoint.x, -1, fieldSize), middlePoint.y)] = true;\n    field[getFieldKey(middlePoint.x, getNeighbourCellCoordinate(middlePoint.y, -1, fieldSize))] = true;\n\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 1, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 1, fieldSize),\n        )\n    ] = true;\n    field[\n        getFieldKey(\n            getNeighbourCellCoordinate(middlePoint.x, 2, fieldSize),\n            getNeighbourCellCoordinate(middlePoint.y, 2, fieldSize),\n        )\n    ] = true;\n\n    return field;\n};\n","import React from 'react';\nimport './GameControlsBlock.scss';\n\nexport const GameControlsBlock: React.FC<{}> = ({ children }) => {\n    return <div className=\"controls-container\">{children}</div>;\n};\n","import React from 'react';\nimport './Cell.scss';\n\ntype Props = { id: string; isAlive: boolean };\n\nexport const Cell: React.FC<Props> = ({ id, isAlive }) => (\n    <td id={id} className={`cell ${isAlive ? 'alive-cell' : ''}`} />\n);\n","import { Reducer } from 'react';\nimport { calculateNextGeneration, Field, getFieldKey } from './gameService';\nimport { AMOUNT_OF_HISTORY_RECORDS_TO_STORE, CELL_SIZE, MAX_CELLS_TO_DISPLAY } from './config';\n\nexport const initFieldSize = (): number => {\n    const amountOfCellsToDisplayOnThisDevice = Math.floor(window.innerWidth / CELL_SIZE);\n\n    return amountOfCellsToDisplayOnThisDevice > MAX_CELLS_TO_DISPLAY\n        ? MAX_CELLS_TO_DISPLAY\n        : amountOfCellsToDisplayOnThisDevice;\n};\n\ntype GameState = {\n    fieldState: Field;\n    fieldSize: number;\n    history: Field[];\n};\n\nexport const gameInitialState: GameState = {\n    fieldState: {},\n    fieldSize: initFieldSize(),\n    history: [],\n};\n\nexport enum GameActionType {\n    AddAliveCell = 'AddAliveCell',\n    TriggerNextGeneration = 'TriggerNextGeneration',\n    Reset = 'Reset',\n    IncreaseFieldSize = 'IncreaseFieldSize',\n    DecreaseFieldSize = 'DecreaseFieldSize',\n    RunPreset = 'RunPreset',\n    GoToPreviousGeneration = 'GoToPreviousGeneration',\n}\n\nexport type GameAction = {\n    type: GameActionType;\n    payload: any; // FIXME we can introduce specific type for every action to type payload. Skipping this for speed.\n};\n\nexport const gameReducer: Reducer<GameState, GameAction> = (state, action: GameAction): GameState => {\n    switch (action.type) {\n        case GameActionType.TriggerNextGeneration: {\n            const { fieldState, fieldSize, history } = state;\n            const updatedField = calculateNextGeneration(fieldState, fieldSize);\n\n            return {\n                ...state,\n                fieldState: updatedField,\n                // game cycle can be indefinite, se we cannot track all possible history, hence limiting it to last X records\n                history: [...history.slice(-AMOUNT_OF_HISTORY_RECORDS_TO_STORE), fieldState],\n            };\n        }\n\n        case GameActionType.AddAliveCell: {\n            const { fieldState } = state;\n            const { x, y } = action.payload;\n\n            // FIXME: does user interaction considered to be a new generation???\n            // If so, we should create a new history record here\n\n            return {\n                ...state,\n                fieldState: { ...fieldState, [getFieldKey(x, y)]: true },\n            };\n        }\n\n        case GameActionType.Reset: {\n            return {\n                ...gameInitialState,\n            };\n        }\n\n        case GameActionType.IncreaseFieldSize: {\n            const { fieldSize } = state;\n\n            return {\n                ...state,\n                fieldSize: fieldSize + 1,\n            };\n        }\n\n        case GameActionType.DecreaseFieldSize: {\n            const { fieldSize } = state;\n\n            return {\n                ...state,\n                fieldSize: fieldSize - 1,\n            };\n        }\n\n        case GameActionType.GoToPreviousGeneration: {\n            const { history } = state;\n            const previousFieldState = history[history.length - 1];\n\n            return {\n                ...state,\n                fieldState: previousFieldState,\n                history: history.filter((item) => item !== previousFieldState),\n            };\n        }\n\n        case GameActionType.RunPreset: {\n            const updatedFieldState = action.payload;\n\n            return {\n                ...state,\n                fieldState: updatedFieldState,\n                history: [],\n            };\n        }\n\n        default:\n            return state;\n    }\n};\n","import React, { MouseEvent, useCallback, useMemo } from 'react';\nimport { Cell } from './Cell';\nimport { getFieldKey } from '../gameService';\nimport './GameField.scss';\n\ntype Props = {\n    fieldSize: number;\n    field: Record<string, boolean>;\n    onCellClick: ({ x, y }: { x: number; y: number }) => void;\n};\n\nexport const GameField: React.FC<Props> = ({ fieldSize, field, onCellClick }) => {\n    const handleCellClick = useCallback(\n        (e: MouseEvent) => {\n            const targetId = (e.target as HTMLTableCellElement).id;\n            const [x, y] = targetId.split('_');\n\n            onCellClick({ x: Number(x), y: Number(y) });\n        },\n        [onCellClick],\n    );\n\n    const fieldSizeArray = useMemo(() => new Array(fieldSize).fill(null), [fieldSize]);\n\n    return (\n        <table className=\"game-field\" data-testid=\"game-field\" onClick={handleCellClick}>\n            <tbody>\n                {fieldSizeArray.map((_, x) => {\n                    const cells = fieldSizeArray.map((_, y) => {\n                        const id = getFieldKey(x, y);\n                        return <Cell key={id} id={id} isAlive={field[id]} />;\n                    });\n\n                    return <tr key={x}>{cells}</tr>;\n                })}\n            </tbody>\n        </table>\n    );\n};\n","import { useState, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\n\ninterface WindowSize {\n    width: number;\n    height: number;\n}\n\nconst init = (): WindowSize => {\n    return {\n        width: window.innerWidth,\n        height: window.innerHeight,\n    };\n};\n\nconst useWindowSize = (): WindowSize => {\n    const [windowSize, setWindowSize] = useState(init);\n\n    useEffect(() => {\n        const handleWindowResize = debounce(() => {\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }, 100);\n\n        window.addEventListener('resize', handleWindowResize);\n\n        return (): void => {\n            window.removeEventListener('resize', handleWindowResize);\n        };\n    }, []);\n\n    return windowSize;\n};\n\nexport default useWindowSize;\n","export const CELL_SIZE = 24; // size of 1 cell in pixels. Should be aligned with styles\nexport const MAX_CELLS_TO_DISPLAY = 25; // amount of cells to display on big screens\nexport const AMOUNT_OF_HISTORY_RECORDS_TO_STORE = 1000;\n","import React, { useEffect, useReducer, useState } from 'react';\nimport { GameControlsBlock } from './components/GameControlsBlock';\nimport { GameField } from './components/GameField';\nimport {\n    Field,\n    generateBeaconPreset,\n    generateGliderPreset,\n    generatePulsarPreset,\n    SupportedTemplate,\n} from './gameService';\nimport useWindowSize from './hooks/useWindowSize';\nimport { GameActionType, gameInitialState, gameReducer } from './gameReducer';\nimport { CELL_SIZE } from './config';\nimport './App.scss';\n\nconst SIMULATION_STEP_INTERVAL = 500; // time interval before next step in milliseconds\n\nconst App: React.FC = () => {\n    const [isGameActive, setIsGameActive] = useState(false);\n    const [state, dispatch] = useReducer(gameReducer, gameInitialState);\n    const [maxFieldSize, setMaxFieldSize] = useState(state.fieldSize);\n\n    const windowSize = useWindowSize();\n\n    useEffect(() => {\n        let intervalRef: undefined | number;\n\n        if (isGameActive) {\n            intervalRef = window.setInterval(() => {\n                dispatch({\n                    type: GameActionType.TriggerNextGeneration,\n                    payload: null,\n                });\n            }, SIMULATION_STEP_INTERVAL);\n        }\n\n        return () => {\n            clearInterval(intervalRef);\n        };\n    }, [isGameActive]);\n\n    useEffect(() => {\n        const amountOfCellsToDisplayOnThisDevice = Math.floor(windowSize.width / CELL_SIZE);\n        setMaxFieldSize(amountOfCellsToDisplayOnThisDevice);\n    }, [windowSize.width]);\n\n    const handleCellClick = ({ x, y }: { x: number; y: number }) => {\n        dispatch({\n            type: GameActionType.AddAliveCell,\n            payload: { x, y },\n        });\n    };\n\n    const handleClickReset = () => {\n        dispatch({\n            type: GameActionType.Reset,\n            payload: null,\n        });\n    };\n\n    const handleAddTemplate = (template: SupportedTemplate) => {\n        let updatedField: Field | undefined;\n\n        const { fieldSize } = state;\n\n        switch (template) {\n            case SupportedTemplate.glider: {\n                updatedField = generateGliderPreset(fieldSize);\n                break;\n            }\n            case SupportedTemplate.pulsar: {\n                updatedField = generatePulsarPreset(fieldSize);\n                break;\n            }\n            case SupportedTemplate.beacon: {\n                updatedField = generateBeaconPreset(fieldSize);\n                break;\n            }\n            default:\n                break;\n        }\n\n        if (!updatedField) {\n            return;\n        }\n\n        dispatch({\n            type: GameActionType.RunPreset,\n            payload: updatedField,\n        });\n\n        setIsGameActive(true);\n    };\n\n    const handleClickNextStep = () => {\n        dispatch({\n            type: GameActionType.TriggerNextGeneration,\n            payload: null,\n        });\n    };\n\n    const handleClickPreviousStep = () => {\n        dispatch({\n            type: GameActionType.GoToPreviousGeneration,\n            payload: null,\n        });\n    };\n\n    const handleAddRow = () => {\n        dispatch({\n            type: GameActionType.IncreaseFieldSize,\n            payload: null,\n        });\n    };\n\n    const handleRemoveRow = () => {\n        dispatch({\n            type: GameActionType.DecreaseFieldSize,\n            payload: null,\n        });\n    };\n\n    return (\n        <main className=\"page-layout\">\n            <GameControlsBlock>\n                <span className=\"controls-label\">Simulation</span>\n                <div>\n                    <button className=\"controls-button\" onClick={() => setIsGameActive(!isGameActive)}>\n                        {!isGameActive ? 'Start' : 'Stop'}\n                    </button>\n                    <button className=\"controls-button\" onClick={handleClickReset}>\n                        Reset\n                    </button>\n                </div>\n            </GameControlsBlock>\n            <GameControlsBlock>\n                <span className=\"controls-label\">Field size</span>\n                <div>\n                    <button\n                        className=\"controls-button\"\n                        disabled={state.fieldSize >= maxFieldSize}\n                        onClick={handleAddRow}\n                    >\n                        Increase\n                    </button>\n                    <button className=\"controls-button\" disabled={state.fieldSize < 2} onClick={handleRemoveRow}>\n                        Decrease\n                    </button>\n                </div>\n            </GameControlsBlock>\n            <GameControlsBlock>\n                <span className=\"controls-label\">Generations</span>\n                <div>\n                    <button\n                        className=\"controls-button\"\n                        disabled={!state.history.length}\n                        onClick={handleClickPreviousStep}\n                    >\n                        Previous\n                    </button>\n                    <button className=\"controls-button\" onClick={handleClickNextStep}>\n                        Next\n                    </button>\n                </div>\n            </GameControlsBlock>\n            <GameControlsBlock>\n                <span className=\"controls-label\">Templates</span>\n                <div>\n                    <button className=\"controls-button\" onClick={() => handleAddTemplate(SupportedTemplate.glider)}>\n                        Glider\n                    </button>\n                    <button className=\"controls-button\" onClick={() => handleAddTemplate(SupportedTemplate.pulsar)}>\n                        Pulsar\n                    </button>\n                    <button className=\"controls-button\" onClick={() => handleAddTemplate(SupportedTemplate.beacon)}>\n                        Beacon\n                    </button>\n                </div>\n            </GameControlsBlock>\n            <GameField fieldSize={state.fieldSize} field={state.fieldState} onCellClick={handleCellClick} />\n        </main>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}